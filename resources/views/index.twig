{% extends '/templates/app.twig' %}
{% block content %}
<link rel="stylesheet" type="text/css" href="./css/index.css">
<div id="app">
<div id="topContainer">
    <div id="headerContainer">
        <h1 align="center" id = "mainTitle">Dashboard</h1>
        <img src="./images/hugeIcon.png" height="62" width="62" id="icon">
    </div>
    <div id="abouttheapp">
    <a href="https://github.com/austinbailey1114/LiftAppSite" id="aboutLink"><h3>About</h3></a>
    <a href="https://github.com/austinbailey1114/iOS" id="appLink"><h3>The App</h3></a>
    </div>
    <div id="linksContainer">
        <div class="dropdown">
            <button class="dropButton">{{ name }}</button>
        </div>
        <img src="./images/userIcon.png" height="52" width="52" id="userIcon">
    </div>
</div>
<div id="dashboardDiv">
    <div id="container">
        <div class="lift">
            <div>
                <h2 align="center" id="liftProgressTitle">Your Lift Progress</h2>
                <form id="lifttableform" action="lifts/view/asTable">
                    <a id="lifttable" href="lifts/view/asTable">View as Table</a>
                </form>
            </div>
            <select name="chooseLift" id="chooseLiftToDisplay">
                {% for type in lifttypes %}
                    <option value="{{ type.name }}">{{ type.name }}</option>
                {% endfor %}
            </select>
            <div id ="graphDiv">
                <canvas id="myChart"></canvas>
            </div>
        </div>
        <div id="newLiftContainer">
            <form action="{{ path_for('lift.post') }}" method="post">
                <div id="addNewWeight">
                    <p id="promptWeight">Weight: </p>
                    <input type="text" name="weight" id="weightInput" placeholder="pounds" autocomplete="off" v-on:input="checkInput($('#weightInput').val(), 'promptWeight', 'Weight: ')">
                </div>
                <div id="addNewReps">
                    <p id="promptReps">Reps:</p>
                    <input type="text" name="reps" id="repsInput" placeholder="repetitions" autocomplete="off" v-on:input="checkInput($('#repsInput').val(), 'promptReps', 'Reps: ')">
                </div>
                <div id="addNewType">
                    <p id="promptType">Type:</p>
                    <div id="typeSelectDiv">
                        <select id="lifttypes" name='liftType' v-on:change="fillType()">
                            <option value="select">-- Select Type--</option>
                            <option value="new">New</option>
                            {% for type in lifttypes %}
                                <option value="{{ type.name }}">{{ type.name }}</option>
                            {% endfor %}
                        </select>
                        <div id="newType" style="display: none">
                            <button id='exitNewLift' type=button v-on:click='unfillType()'>
                                <img src='./images/xicon.png' height='15' width='15' style='margin-right: 5px;'>
                            </button>
                            <input type='text' name='newType' id='typeInput' placeholder='new type' autocomplete='off'>
                        </div>
                    </div>
                </div>
                <div id="addNewDate">
                    <p id="promptDate">Date:</p>
                    <input type="text" name="date" id="dateInput" placeholder="leave blank if today" autocomplete="off">
                </div>
                <button id="saveLift">Save</button>
            </form>
        </div>
    </div>
    <div class="nutrition">
        <div id="showData">
        </div>
        <div id="newFood">
            <form id="searchFood" action="./foods/search" method="post">
                <div id="enterfood">
                    <h2 id="newFoodTitle">Search Foods: </h2>
                    <input type="text" name="searchField" id="searchInput" placeholder="Food, brand, etc.">
                </div>
                <div id="foodbutton">
                    <button id="search">Search</button>
                </div>
            </form>
        </div>
        <div id="foodHistoryContainer">
            <h3>Food Today</h3>
            <div id="foodHistory">
            </div>
        </div>
    </div>
    <div id="weightDiv">
        <div class="bodyweightGraph">
            <h2 id="bodyweighttabletitle">Bodyweight</h2>
            <a id="bodyweighttable" href="bodyweights/view/asTable">View as Table</a>
            <div id ="bodyweightGraphDiv">
                <canvas id="bodyweightChart"></canvas>
            </div>
        </div>
        <div id="newWeight">
            <form action="{{ path_for('bodyweight.post') }}" method="post">
                <div id="promptBodyweight">
                    <h2 id="weightTitle">Update: </h2>
                    <input type="text" name="weight" id="newBodyWeight" placeholder="pounds">
                </div>
                <div id="addBodyweightButtonDiv">
                    <button id="add">Update</button>
                </div>
            </form>
        </div>

    </div>
</div>
</div>
{% endblock %}
{% block scripts %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
<script src="{{ base_url() }}/js/jquery.min.js"></script>
<script src="{{ base_url() }}/js/jquery.maskedinput.js">

</script>
<script type="text/javascript">

var lifts = {{ lifts|json_encode|raw }};
var bodyWeights = {{ bodyweights|json_encode|raw }}

$('#dateInput').mask("99/99/9999", {placeholder: "mm/dd/yyyy"});

$('#chooseLiftToDisplay').change(function() {
    buildLiftChart();
});

$('#lifttypes').change(function() {
    if ($('#lifttypes').val() == 'new') {
        $('#lifttypes').hide();
        $('#newType').css('display', 'block');
    }
});

$('#exitNewLift').click(function() {
    $('#lifttypes').show();
    $('#lifttypes').val('select')
    $('#newType').css('display', 'none');
});

function buildLiftChart() {
    var type = $('#chooseLiftToDisplay').val();
    var xAxis = [];
    var yAxis = [];
    for (var i = 0; i < lifts.length; i++) {
        //If the lift is of the selected type
        if(lifts[i].type == type) {
            if (xAxis.length > 0) {
                //Find the index of the date of the current item
                var index = xAxis.findIndex(function(element) {
                    return element == lifts[i].date;
                });
                // If the date already exists, check if the corresponding lift (in the y axis) needs to be updated
                if (index != null) {
                    // Only change the lift if the 1RM of the current index is larger
                    if (yAxis[index] < (lifts[i].weight * (1 + (lifts[i].reps  / 30)))) {
                        yAxis[index] = lifts[i].weight * (1 + (lifts[i].reps  / 30));
                    }
                }
            } else {
                xAxis.push(lifts[i].date);
                yAxis.push(lifts[i].weight * (1 + (lifts[i].reps  / 30)));
            }

        }
    }

    var ctx = document.getElementById('myChart').getContext('2d');
    var chart = new Chart(ctx, {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {
        labels: xAxis,
        datasets: [{
            borderColor: 'rgb(231,76,60)',
            backgroundColor: 'rgba(231,76,60,0.3',
            fill: true,
            data: yAxis,
            pointBackgroundColor: 'rgb(231,76,60)',

        }]
    },

    // Configuration options go here
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            display: false
         },
    }
    });

    $('#myChart').hide().fadeIn(1000);
}

function buildWeightChart() {
    var xAxis = [];
    var yAxis = [];
    for (var i = 0; i < bodyWeights.length; i++) {
        xAxis.push(bodyWeights[i].date);
        yAxis.push(bodyWeights[i].weight);
    }

    var ctx = document.getElementById('bodyweightChart').getContext('2d');
    var chart = new Chart(ctx, {
    	// The type of chart we want to create
    	type: 'line',

    	// The data for our dataset
    	data: {
    	    labels: xAxis,
    	    datasets: [{
    	        borderColor: 'rgb(231,76,60)',
    	        backgroundColor: 'rgba(231,76,60,0.3',
    	        fill: true,
    	        pointBackgroundColor: 'rgb(231,76,60)',
    	        data: yAxis,
    	    }]
    	},

    	// Configuration options go here
    	options: {
    	    responsive: true,
    	    maintainAspectRatio: false,
    	    legend: {
    	        display: false
    	     },
    	}
    });
}


buildWeightChart();

buildLiftChart();
</script>
{% endblock %}
